# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'microwave.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from qtawesome import icon

import sys
import paramAlgorithm
import numpy as np


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(816, 277)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(190, 10, 621, 211))
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.page)
        self.textBrowser_3.setGeometry(QtCore.QRect(435, 1, 171, 201))
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.page)
        self.lineEdit_5.setGeometry(QtCore.QRect(290, 50, 113, 20))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.page)
        self.lineEdit_6.setGeometry(QtCore.QRect(290, 80, 113, 20))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.page)
        self.lineEdit_7.setGeometry(QtCore.QRect(290, 110, 113, 20))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.Generate = QtWidgets.QPushButton(self.page)
        self.Generate.setGeometry(QtCore.QRect(300, 160, 91, 23))
        self.Generate.setObjectName("Generate")
        self.label_12 = QtWidgets.QLabel(self.page)
        self.label_12.setGeometry(QtCore.QRect(290, 15, 111, 40))
        self.label_12.setObjectName("label_12")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.page)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(0, 20, 271, 191))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.comboBox_3 = QtWidgets.QComboBox(self.verticalLayoutWidget_2)
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.verticalLayout_2.addWidget(self.comboBox_3)
        self.label_6 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_2.addWidget(self.label_6)
        self.circuittitle = QtWidgets.QLabel(self.page)
        self.circuittitle.setGeometry(QtCore.QRect(0, 0, 54, 12))
        self.circuittitle.setObjectName("circuittitle")
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.lineEdit = QtWidgets.QLineEdit(self.page_2)
        self.lineEdit.setGeometry(QtCore.QRect(130, 50, 31, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.label_4 = QtWidgets.QLabel(self.page_2)
        self.label_4.setGeometry(QtCore.QRect(253, 82, 71, 20))
        self.label_4.setObjectName("label_4")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.page_2)
        self.lineEdit_3.setGeometry(QtCore.QRect(130, 110, 31, 31))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton = QtWidgets.QPushButton(self.page_2)
        self.pushButton.setGeometry(QtCore.QRect(60, 180, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.textBrowser = QtWidgets.QTextBrowser(self.page_2)
        self.textBrowser.setGeometry(QtCore.QRect(330, 20, 256, 181))
        self.textBrowser.setObjectName("textBrowser")
        self.label_3 = QtWidgets.QLabel(self.page_2)
        self.label_3.setGeometry(QtCore.QRect(130, 20, 101, 16))
        self.label_3.setObjectName("label_3")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.page_2)
        self.lineEdit_2.setGeometry(QtCore.QRect(180, 50, 31, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.page_2)
        self.lineEdit_4.setGeometry(QtCore.QRect(180, 110, 31, 31))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label = QtWidgets.QLabel(self.page_2)
        self.label.setGeometry(QtCore.QRect(0, 40, 121, 16))
        self.label.setObjectName("label")
        self.comboBox = QtWidgets.QComboBox(self.page_2)
        self.comboBox.setGeometry(QtCore.QRect(10, 60, 69, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox_2 = QtWidgets.QComboBox(self.page_2)
        self.comboBox_2.setGeometry(QtCore.QRect(10, 120, 69, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.label_2 = QtWidgets.QLabel(self.page_2)
        self.label_2.setGeometry(QtCore.QRect(0, 100, 121, 16))
        self.label_2.setObjectName("label_2")
        self.stackedWidget.addWidget(self.page_2)
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 30, 160, 191))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.verticalLayoutWidget)
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.verticalLayout.addWidget(self.textBrowser_2)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(20, 10, 54, 16))
        self.label_5.setObjectName("label_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 816, 23))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        MainWindow.setMenuBar(self.menubar)
        self.actionMatrix_Coefficient_Transfer = QtWidgets.QAction(MainWindow)
        self.actionMatrix_Coefficient_Transfer.setObjectName("actionMatrix_Coefficient_Transfer")
        self.actionCircuit_Parameters_to_matrices = QtWidgets.QAction(MainWindow)
        self.actionCircuit_Parameters_to_matrices.setObjectName("actionCircuit_Parameters_to_matrices")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionDevelop_team = QtWidgets.QAction(MainWindow)
        self.actionDevelop_team.setObjectName("actionDevelop_team")
        self.menu.addAction(self.actionMatrix_Coefficient_Transfer)
        self.menu.addAction(self.actionCircuit_Parameters_to_matrices)
        self.menu.addSeparator()
        self.menu.addAction(self.actionExit)
        self.menuAbout.addAction(self.actionDevelop_team)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Generate.setText(_translate("MainWindow", "Generate"))
        self.label_12.setText(_translate("MainWindow", "请输入参数: Z"))
        self.comboBox_3.setItemText(0, _translate("MainWindow", "单一Z阻抗"))
        self.comboBox_3.setItemText(1, _translate("MainWindow", "单一Y导纳"))
        self.comboBox_3.setItemText(2, _translate("MainWindow", "Z0=1, β"))
        self.comboBox_3.setItemText(3, _translate("MainWindow", "N:1变压器"))
        self.comboBox_3.setItemText(4, _translate("MainWindow", "三导纳Y1,Y2,Y3"))
        self.comboBox_3.setItemText(5, _translate("MainWindow", "三阻抗Z1,Z2,Z3"))
        self.label_6.setText(_translate("MainWindow", ""))
        self.circuittitle.setText(_translate("MainWindow", "TextLabel"))
        self.label_4.setText(_translate("MainWindow", "———>"))
        self.pushButton.setText(_translate("MainWindow", "Convert"))
        self.label_3.setText(_translate("MainWindow", "Matrix Elements"))
        self.label.setText(_translate("MainWindow", "Original Matrix"))
        self.comboBox.setItemText(0, _translate("MainWindow", "ABCD"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Z"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Y"))
        self.comboBox.setItemText(3, _translate("MainWindow", "S"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "ABCD"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "Z"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "Y"))
        self.comboBox_2.setItemText(3, _translate("MainWindow", "S"))
        self.label_2.setText(_translate("MainWindow", "Target Matrix"))
        self.label_5.setText(_translate("MainWindow", "Log"))
        self.circuittitle.setText(_translate("MainWindow", "二端口网络类型"))
        self.menu.setTitle(_translate("MainWindow", "功能选择"))
        self.menuAbout.setTitle(_translate("MainWindow", "About"))
        self.actionMatrix_Coefficient_Transfer.setText(_translate("MainWindow", "Matrix Coefficient Conversion"))
        self.actionCircuit_Parameters_to_matrices.setText(_translate("MainWindow", "Circuit Parameters to matrices"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionDevelop_team.setText(_translate("MainWindow", "Develop team"))

        '''
        —————————美化部分———————————
        '''
        MainWindow.setWindowOpacity(0.9)  # 设置窗口透明度
        # MainWindow.setAttribute(QtCore.Qt.WA_TranslucentBackground) # 设置窗口背景透明
        # MainWindow.setWindowFlag(QtCore.Qt.FramelessWindowHint)  # 隐藏边框
        pe = QtGui.QPalette()
        MainWindow.setAutoFillBackground(True)
        pe.setColor(QtGui.QPalette.Window, QtCore.Qt.lightGray)  # 设置背景色
        # pe.setColor(QPalette.Background,Qt.blue)
        MainWindow.setPalette(pe)
        MainWindow.setWindowTitle("微波网络参数矩阵转换可视化 v1.0.0 by Alex")
        spin_icon = icon('mdi.cat', color='black')
        self.pushButton.setIcon(spin_icon)  # 设置图标
        self.Generate.setIcon(spin_icon)  # 设置图标
        MainWindow.setWindowIcon(spin_icon)
        self.label.setStyleSheet('''QLabel{color:white;font-family:Roman times;}''')
        self.label_2.setStyleSheet('''QLabel{color:white;font-family:Roman times;}''')
        self.label_3.setStyleSheet('''QLabel{color:white;font-family:Roman times;}''')
        self.label_4.setStyleSheet('''QLabel{color:white;font-family:Roman times;}''')
        self.label_5.setStyleSheet('''QLabel{color:white;font-family:Roman times;}''')
        self.circuittitle.setStyleSheet('''QLabel{color:white;font-family:Roman times;}''')
        self.pushButton.setStyleSheet('''QPushButton{border:none;}
        QPushButton:hover{color:white;
                    border:2px solid #F3F3F5;
                    border-radius:35px;
                    background:Gray;}''')
        self.Generate.setStyleSheet('''QPushButton{border:none;}
                QPushButton:hover{color:white;
                            border:2px solid #F3F3F5;
                            border-radius:35px;
                            background:Gray;}''')
        MainWindow.setFixedSize(MainWindow.width(), MainWindow.height())  # 禁止调整窗口大小

        self.pushButton.clicked.connect(self.conversion_clickButton)
        self.Generate.clicked.connect(self.generate_clickButton)

        # 菜单栏功能
        self.actionMatrix_Coefficient_Transfer.triggered.connect(self.switch_to_matrix_coef_conversion)  # 切换至矩阵运算
        self.actionCircuit_Parameters_to_matrices.triggered.connect(self.switch_to_circuit)  # 根据电路参数生成
        self.actionExit.triggered.connect(self.quit)  # 退出
        self.actionDevelop_team.triggered.connect(self.messageDialog)

        # 电路图
        pixmap1 = QtGui.QPixmap("./1.png")  # 按指定路径找到图片
        self.label_6.setPixmap(pixmap1)  # 在label上显示图片, 默认为1
        self.comboBox_3.currentIndexChanged.connect(self.input_and_image_change)  # 更改电路图
        self.lineEdit_6.setVisible(False)
        self.lineEdit_7.setVisible(False)

    def input_and_image_change(self):
        pixmap1 = QtGui.QPixmap("./1.png")  # 按指定路径找到图片
        pixmap2 = QtGui.QPixmap("./2.png")
        pixmap3 = QtGui.QPixmap("./3.png")
        pixmap4 = QtGui.QPixmap("./4.png")
        pixmap5 = QtGui.QPixmap("./5.png")
        pixmap6 = QtGui.QPixmap("./6.png")
        if self.comboBox_3.currentIndex() == 0:
            self.label_6.setPixmap(pixmap1)  # 在label上显示图片
            self.lineEdit_6.setVisible(False)
            self.lineEdit_7.setVisible(False)
            self.label_12.setText("请输入参数: Z")
        elif self.comboBox_3.currentIndex() == 1:
            self.label_6.setPixmap(pixmap2)
            self.lineEdit_6.setVisible(False)
            self.lineEdit_7.setVisible(False)
            self.label_12.setText("请输入参数: Y")
        elif self.comboBox_3.currentIndex() == 2:
            self.label_6.setPixmap(pixmap3)
            self.lineEdit_6.setVisible(True)
            self.lineEdit_7.setVisible(False)
            self.label_12.setText("请依次输入参数:\nβ,l, 此处Z0=1")
        elif self.comboBox_3.currentIndex() == 3:
            self.label_6.setPixmap(pixmap4)
            self.lineEdit_6.setVisible(False)
            self.lineEdit_7.setVisible(False)
            self.label_12.setText("请输入参数: N")
        elif self.comboBox_3.currentIndex() == 4:
            self.label_6.setPixmap(pixmap5)
            self.lineEdit_6.setVisible(True)
            self.lineEdit_7.setVisible(True)
            self.label_12.setText("请依次输入参数:\nY1、Y2、Y3")
        elif self.comboBox_3.currentIndex() == 5:
            self.label_6.setPixmap(pixmap6)
            self.lineEdit_6.setVisible(True)
            self.lineEdit_7.setVisible(True)
            self.label_12.setText("请依次输入参数:\nZ1、Z2、Z3")

    # 菜单切换到矩阵转换
    def switch_to_matrix_coef_conversion(self):
        self.stackedWidget.setCurrentIndex(1)

    # 菜单切换到二端口网络
    def switch_to_circuit(self):
        self.stackedWidget.setCurrentIndex(0)

    # 菜单退出
    def quit(self):
        app = QtWidgets.QApplication.instance()
        app.quit()

    # About
    def messageDialog(self):
        msg_box = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, 'About',
                                        'Developer: Alex Zheng 1951710@tongji.edu.cn\n'
                                        'Team:   1951710 郑焯文\n\t'
                                        '1951864 关天鹏\n\t'
                                        '1951895 徐一凡\n\t'
                                        '1952290 李卓融\n'
                                        'Environment: PyQt5 Python3.9')  # Information可替换为Warning、Critical其他提示框类型
        msg_box.setWindowIcon(QtGui.QIcon('logo.ico'))  # 加载图标
        msg_box.exec_()

    # 参数转换矩阵打印
    def conversion_print_matrix(self, matrix):
        for i in matrix:
            print(str(i)[1:-1])
            self.textBrowser.append(str(i)[1:-1])
            self.cursor = self.textBrowser.textCursor()
            self.textBrowser.moveCursor(self.cursor.End)
            QtWidgets.QApplication.processEvents()  # 光标换行跟随

    # 二端口网络参数矩阵打印
    def circuit_print_matrix(self, matrix):
        for i in matrix:
            print(str(i)[1:-1])
            self.textBrowser_3.append(str(i)[1:-1])
            self.cursor = self.textBrowser_3.textCursor()
            self.textBrowser_3.moveCursor(self.cursor.End)
            QtWidgets.QApplication.processEvents()  # 光标换行跟随

    # Conversion按钮执行事件
    def conversion_clickButton(self):
        if len(self.lineEdit.text()) == 0 or len(self.lineEdit_2.text()) == 0 or len(
                self.lineEdit_3.text()) == 0 or len(self.lineEdit_4.text()) == 0:
            self.textBrowser.setText("<font color='red'>" + "矩阵元素不能为空!")
            return

        e1 = float(self.lineEdit.text())
        e2 = float(self.lineEdit_2.text())
        e3 = float(self.lineEdit_3.text())
        e4 = float(self.lineEdit_4.text())

        # print(self.comboBox.currentIndex())
        # print(self.comboBox_2.currentIndex())

        # print("Widget index:", self.stackedWidget.currentIndex())

        self.switch_to_matrix_coef_conversion()

        if (self.comboBox.currentIndex() == self.comboBox_2.currentIndex()):
            self.textBrowser.setText("<font color='red'>" + "目标矩阵与原矩阵类型不得相同!")
            return
        if (self.comboBox.currentIndex() == 0) and self.comboBox_2.currentIndex() == 1:  # abcd->z
            self.textBrowser.setText("<font color='blue'>" + "基于ABCD矩阵的Z矩阵转换如下：")
            self.textBrowser_2.append("[INFO] ABCD->Z matrix generated!")
            matrix = paramAlgorithm.abcd_to_z(e1, e2, e3, e4)
        elif (self.comboBox.currentIndex() == 0) and self.comboBox_2.currentIndex() == 2:  # abcd->y
            self.textBrowser.setText("<font color='blue'>" + "基于ABCD矩阵的Y矩阵转换如下：")
            self.textBrowser_2.append("[INFO] ABCD->Y matrix generated!")
            matrix = paramAlgorithm.abcd_to_y(e1, e2, e3, e4)
        elif (self.comboBox.currentIndex() == 0) and self.comboBox_2.currentIndex() == 3:  # abcd->s
            self.textBrowser.setText("<font color='blue'>" + "基于ABCD矩阵的S矩阵转换如下：")
            self.textBrowser_2.append("[INFO] ABCD->S matrix generated!")
            matrix = paramAlgorithm.abcd_to_s(e1, e2, e3, e4)
        elif (self.comboBox.currentIndex() == 1) and self.comboBox_2.currentIndex() == 0:  # z->abcd
            self.textBrowser.setText("<font color='blue'>" + "基于Z矩阵的ABCD矩阵转换如下：")
            self.textBrowser_2.append("[INFO] Z->ABCD matrix generated!")
            matrix = paramAlgorithm.z_to_abcd(e1, e2, e3, e4)
        elif (self.comboBox.currentIndex() == 1) and self.comboBox_2.currentIndex() == 2:  # z->y
            self.textBrowser.setText("<font color='blue'>" + "基于Z矩阵的Y矩阵转换如下：")
            self.textBrowser_2.append("[INFO] Z->Y matrix generated!")
            matrix = paramAlgorithm.z_to_y(e1, e2, e3, e4)
        elif (self.comboBox.currentIndex() == 1) and self.comboBox_2.currentIndex() == 3:  # z->s
            self.textBrowser.setText("<font color='blue'>" + "基于Z矩阵的S矩阵转换如下：")
            self.textBrowser_2.append("[INFO] Z->S matrix generated!")
            matrix = paramAlgorithm.z_to_s(e1, e2, e3, e4)
        elif (self.comboBox.currentIndex() == 2) and self.comboBox_2.currentIndex() == 0:  # y->abcd
            self.textBrowser.setText("<font color='blue'>" + "基于Y矩阵的ABCD矩阵转换如下：")
            self.textBrowser_2.append("[INFO] Y->ABCD matrix generated!")
            matrix = paramAlgorithm.y_to_abcd(e1, e2, e3, e4)
        elif (self.comboBox.currentIndex() == 2) and self.comboBox_2.currentIndex() == 1:  # y->z
            self.textBrowser.setText("<font color='blue'>" + "基于Y矩阵的Z矩阵转换如下：")
            self.textBrowser_2.append("[INFO] Y->Z matrix generated!")
            matrix = paramAlgorithm.y_to_z(e1, e2, e3, e4)
        elif (self.comboBox.currentIndex() == 2) and self.comboBox_2.currentIndex() == 3:  # y->s
            self.textBrowser.setText("<font color='blue'>" + "基于Y矩阵的S矩阵转换如下：")
            self.textBrowser_2.append("[INFO] Y->S matrix generated!")
            matrix = paramAlgorithm.y_to_s(e1, e2, e3, e4)
        elif (self.comboBox.currentIndex() == 3) and self.comboBox_2.currentIndex() == 0:  # s->abcd
            self.textBrowser.setText("<font color='blue'>" + "基于S矩阵的ABCD矩阵转换如下：")
            self.textBrowser_2.append("[INFO] S->ABCD matrix generated!")
            matrix = paramAlgorithm.s_to_abcd(e1, e2, e3, e4)
        elif (self.comboBox.currentIndex() == 3) and self.comboBox_2.currentIndex() == 1:  # s->z
            self.textBrowser.setText("<font color='blue'>" + "基于S矩阵的Z矩阵转换如下：")
            self.textBrowser_2.append("[INFO] S->Z matrix generated!")
            matrix = paramAlgorithm.s_to_z(e1, e2, e3, e4)
        elif (self.comboBox.currentIndex() == 3) and self.comboBox_2.currentIndex() == 2:  # s->y
            self.textBrowser.setText("<font color='blue'>" + "基于S矩阵的Y矩阵转换如下：")
            self.textBrowser_2.append("[INFO] S->Y matrix generated!")
            matrix = paramAlgorithm.s_to_y(e1, e2, e3, e4)

        self.conversion_print_matrix(matrix)

        return

    def generate_clickButton(self):

        if self.comboBox_3.currentIndex() == 0 or self.comboBox_3.currentIndex() == 1 or self.comboBox_3.currentIndex() == 3:
            if len(self.lineEdit_5.text()) == 0:
                self.textBrowser_3.setText("<font color='red'>" + "参数不能为空!")
                return

        if self.comboBox_3.currentIndex() == 2:
            if len(self.lineEdit_5.text()) == 0 or len(self.lineEdit_6.text()) == 0:
                self.textBrowser_3.setText("<font color='red'>" + "参数不能为空!")
                return

        if self.comboBox_3.currentIndex() == 4 or self.comboBox_3.currentIndex() == 5:
            if len(self.lineEdit_5.text()) == 0 or len(self.lineEdit_6.text()) == 0 or len(self.lineEdit_7.text()) == 0:
                self.textBrowser_3.setText("<font color='red'>" + "参数不能为空!")
                return

        if self.comboBox_3.currentIndex() == 0:
            z = float(self.lineEdit_5.text())
            a, b, c, d = paramAlgorithm.circuit_1_abcd(z)
        elif self.comboBox_3.currentIndex() == 1:
            y = float(self.lineEdit_5.text())
            a, b, c, d = paramAlgorithm.circuit_2_abcd(y)
        elif self.comboBox_3.currentIndex() == 2:
            beta = float(self.lineEdit_5.text())
            length = float(self.lineEdit_6.text())
            a, b, c, d = paramAlgorithm.circuit_3_abcd(beta, length)
        elif self.comboBox_3.currentIndex() == 3:
            n = float(self.lineEdit_5.text())
            a, b, c, d = paramAlgorithm.circuit_4_abcd(n)
        elif self.comboBox_3.currentIndex() == 4:
            y1 = float(self.lineEdit_5.text())
            y2 = float(self.lineEdit_6.text())
            y3 = float(self.lineEdit_7.text())
            a, b, c, d = paramAlgorithm.circuit_5_abcd(y1, y2, y3)
        elif self.comboBox_3.currentIndex() == 5:
            z1 = float(self.lineEdit_5.text())
            z2 = float(self.lineEdit_6.text())
            z3 = float(self.lineEdit_7.text())
            a, b, c, d = paramAlgorithm.circuit_6_abcd(z1, z2, z3)

        self.textBrowser_3.setText("")
        matrix_abcd = np.mat([[a, b], [c, d]])
        self.textBrowser_3.setText("<font color='blue'>" + "基于该二端口网络的参数矩阵如下：")
        self.textBrowser_3.append("ABCD参数矩阵:")
        self.circuit_print_matrix(matrix_abcd)
        try:
            matrix_z = paramAlgorithm.abcd_to_z(a, b, c, d)
            self.textBrowser_3.append("Z参数矩阵:")
            self.circuit_print_matrix(matrix_z)
        except ZeroDivisionError as e:
            print('except:', e)
            self.textBrowser_3.append("由于除以0,无Z矩阵")
        try:
            matrix_y = paramAlgorithm.abcd_to_y(a, b, c, d)
            self.textBrowser_3.append("Y参数矩阵:")
            self.circuit_print_matrix(matrix_y)
        except ZeroDivisionError as e:
            print('except:', e)
            self.textBrowser_3.append("由于除以0,无Y矩阵")
        try:
            matrix_s = paramAlgorithm.abcd_to_s(a, b, c, d)
            self.textBrowser_3.append("S参数矩阵:")
            self.circuit_print_matrix(matrix_s)
        except ZeroDivisionError as e:
            print('except:', e)
            self.textBrowser_3.append("由于除以0,无S矩阵")

        print(self.comboBox_3.currentText())
        self.textBrowser_2.append(
            "[INFO] Matrices of Two-port circuit:{} generated!".format(self.comboBox_3.currentText()))

        return


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    widgets = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(widgets)
    widgets.show()
    sys.exit(app.exec_())
